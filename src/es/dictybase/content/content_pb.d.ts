// @generated by protoc-gen-es v1.6.0
// @generated from file dictybase/content/content.proto (package dictybase.content, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, FieldMask, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Links } from "../api/jsonapi/payload_pb.js";

/**
 * @generated from message dictybase.content.Content
 */
export declare class Content extends Message<Content> {
  /**
   * @generated from field: dictybase.content.ContentData data = 1;
   */
  data?: ContentData;

  /**
   * @generated from field: dictybase.api.jsonapi.Links links = 2;
   */
  links?: Links;

  constructor(data?: PartialMessage<Content>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.Content";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Content;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Content;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Content;

  static equals(a: Content | PlainMessage<Content> | undefined, b: Content | PlainMessage<Content> | undefined): boolean;
}

/**
 * @generated from message dictybase.content.ContentData
 */
export declare class ContentData extends Message<ContentData> {
  /**
   * The resource name
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Unique id
   *
   * @generated from field: int64 id = 2;
   */
  id: bigint;

  /**
   * @generated from field: dictybase.content.ContentAttributes attributes = 3;
   */
  attributes?: ContentAttributes;

  /**
   * @generated from field: dictybase.api.jsonapi.Links links = 4;
   */
  links?: Links;

  constructor(data?: PartialMessage<ContentData>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.ContentData";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContentData;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContentData;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContentData;

  static equals(a: ContentData | PlainMessage<ContentData> | undefined, b: ContentData | PlainMessage<ContentData> | undefined): boolean;
}

/**
 * Definition of various content fields
 *
 * @generated from message dictybase.content.ContentAttributes
 */
export declare class ContentAttributes extends Message<ContentAttributes> {
  /**
   * page name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * page slug. Look here https://en.wikipedia.org/wiki/Semantic_URL#Slug to know about slug
   *
   * @generated from field: string slug = 2;
   */
  slug: string;

  /**
   * email id of the user who created the content
   *
   * @generated from field: string created_by = 3;
   */
  createdBy: string;

  /**
   * email id of the user who updated the content
   *
   * @generated from field: string updated_by = 4;
   */
  updatedBy: string;

  /**
   * Timestamp for creation and update
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  /**
   * serialized page content(for example serialized draft js object)
   *
   * @generated from field: string content = 7;
   */
  content: string;

  /**
   * namespace for the page
   *
   * @generated from field: string namespace = 8;
   */
  namespace: string;

  constructor(data?: PartialMessage<ContentAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.ContentAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContentAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContentAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContentAttributes;

  static equals(a: ContentAttributes | PlainMessage<ContentAttributes> | undefined, b: ContentAttributes | PlainMessage<ContentAttributes> | undefined): boolean;
}

/**
 * @generated from message dictybase.content.ContentRequest
 */
export declare class ContentRequest extends Message<ContentRequest> {
  /**
   * Url slug
   * Look here https://en.wikipedia.org/wiki/Semantic_URL#Slug to know about slug
   * The slug name should be unique
   *
   * @generated from field: string slug = 1;
   */
  slug: string;

  constructor(data?: PartialMessage<ContentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.ContentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContentRequest;

  static equals(a: ContentRequest | PlainMessage<ContentRequest> | undefined, b: ContentRequest | PlainMessage<ContentRequest> | undefined): boolean;
}

/**
 * @generated from message dictybase.content.ContentIdRequest
 */
export declare class ContentIdRequest extends Message<ContentIdRequest> {
  /**
   * Unique id to identify content
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<ContentIdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.ContentIdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContentIdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContentIdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContentIdRequest;

  static equals(a: ContentIdRequest | PlainMessage<ContentIdRequest> | undefined, b: ContentIdRequest | PlainMessage<ContentIdRequest> | undefined): boolean;
}

/**
 * Definition for fields that are needed for storing the content
 *
 * @generated from message dictybase.content.NewContentAttributes
 */
export declare class NewContentAttributes extends Message<NewContentAttributes> {
  /**
   * page name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * email of the user who is creating this content
   *
   * @generated from field: string created_by = 2;
   */
  createdBy: string;

  /**
   * page content, expected to be serialized `JSON` string.
   *
   * @generated from field: string content = 3;
   */
  content: string;

  /**
   * namespace for the page, it is prepended to the
   * name to generate an unique slug.
   *
   * @generated from field: string namespace = 4;
   */
  namespace: string;

  /**
   * page slug. Look here https://en.wikipedia.org/wiki/Semantic_URL#Slug to know about slug
   *
   * @generated from field: string slug = 5;
   */
  slug: string;

  constructor(data?: PartialMessage<NewContentAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.NewContentAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewContentAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewContentAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewContentAttributes;

  static equals(a: NewContentAttributes | PlainMessage<NewContentAttributes> | undefined, b: NewContentAttributes | PlainMessage<NewContentAttributes> | undefined): boolean;
}

/**
 * Definition for storing new content
 *
 * @generated from message dictybase.content.StoreContentRequest
 */
export declare class StoreContentRequest extends Message<StoreContentRequest> {
  /**
   * @generated from field: dictybase.content.StoreContentRequest.Data data = 1;
   */
  data?: StoreContentRequest_Data;

  constructor(data?: PartialMessage<StoreContentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.StoreContentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreContentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreContentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreContentRequest;

  static equals(a: StoreContentRequest | PlainMessage<StoreContentRequest> | undefined, b: StoreContentRequest | PlainMessage<StoreContentRequest> | undefined): boolean;
}

/**
 * @generated from message dictybase.content.StoreContentRequest.Data
 */
export declare class StoreContentRequest_Data extends Message<StoreContentRequest_Data> {
  /**
   * resource name
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: dictybase.content.NewContentAttributes attributes = 2;
   */
  attributes?: NewContentAttributes;

  constructor(data?: PartialMessage<StoreContentRequest_Data>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.StoreContentRequest.Data";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreContentRequest_Data;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreContentRequest_Data;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreContentRequest_Data;

  static equals(a: StoreContentRequest_Data | PlainMessage<StoreContentRequest_Data> | undefined, b: StoreContentRequest_Data | PlainMessage<StoreContentRequest_Data> | undefined): boolean;
}

/**
 * Fields that can be updated
 * Changing either or both of name and namespace
 * attributes alter the slug for the page
 *
 * @generated from message dictybase.content.ExistingContentAttributes
 */
export declare class ExistingContentAttributes extends Message<ExistingContentAttributes> {
  /**
   * email id of the user who is updating this content
   *
   * @generated from field: string updated_by = 1;
   */
  updatedBy: string;

  /**
   * serialized page content(for example serialized draft js object)
   *
   * @generated from field: string content = 2;
   */
  content: string;

  constructor(data?: PartialMessage<ExistingContentAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.ExistingContentAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExistingContentAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExistingContentAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExistingContentAttributes;

  static equals(a: ExistingContentAttributes | PlainMessage<ExistingContentAttributes> | undefined, b: ExistingContentAttributes | PlainMessage<ExistingContentAttributes> | undefined): boolean;
}

/**
 * @generated from message dictybase.content.UpdateContentRequest
 */
export declare class UpdateContentRequest extends Message<UpdateContentRequest> {
  /**
   * @generated from field: dictybase.content.UpdateContentRequest.Data data = 1;
   */
  data?: UpdateContentRequest_Data;

  /**
   * @generated from field: int64 id = 2;
   */
  id: bigint;

  /**
   * An optional mask specifying which fields to update.
   * Presence of this field allow partial updates.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateContentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.UpdateContentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateContentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateContentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateContentRequest;

  static equals(a: UpdateContentRequest | PlainMessage<UpdateContentRequest> | undefined, b: UpdateContentRequest | PlainMessage<UpdateContentRequest> | undefined): boolean;
}

/**
 * @generated from message dictybase.content.UpdateContentRequest.Data
 */
export declare class UpdateContentRequest_Data extends Message<UpdateContentRequest_Data> {
  /**
   * resource name
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * unique id
   *
   * @generated from field: int64 id = 2;
   */
  id: bigint;

  /**
   * @generated from field: dictybase.content.ExistingContentAttributes attributes = 3;
   */
  attributes?: ExistingContentAttributes;

  constructor(data?: PartialMessage<UpdateContentRequest_Data>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.content.UpdateContentRequest.Data";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateContentRequest_Data;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateContentRequest_Data;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateContentRequest_Data;

  static equals(a: UpdateContentRequest_Data | PlainMessage<UpdateContentRequest_Data> | undefined, b: UpdateContentRequest_Data | PlainMessage<UpdateContentRequest_Data> | undefined): boolean;
}

