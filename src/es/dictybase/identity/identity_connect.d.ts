// @generated by protoc-gen-connect-es v1.3.0
// @generated from file dictybase/identity/identity.proto (package dictybase.identity, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateIdentityReq, Identity, IdentityProviderReq } from "./identity_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { ExistResponse, HealthzIdRequest, IdRequest } from "../api/jsonapi/request_pb.js";

/**
 * The content service definition
 *
 * @generated from service dictybase.identity.IdentityService
 */
export declare const IdentityService: {
  readonly typeName: "dictybase.identity.IdentityService",
  readonly methods: {
    /**
     * Gets the specified identity
     *
     * @generated from rpc dictybase.identity.IdentityService.GetIdentityFromProvider
     */
    readonly getIdentityFromProvider: {
      readonly name: "GetIdentityFromProvider",
      readonly I: typeof IdentityProviderReq,
      readonly O: typeof Identity,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc dictybase.identity.IdentityService.GetIdentity
     */
    readonly getIdentity: {
      readonly name: "GetIdentity",
      readonly I: typeof IdRequest,
      readonly O: typeof Identity,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc dictybase.identity.IdentityService.ExistProviderIdentity
     */
    readonly existProviderIdentity: {
      readonly name: "ExistProviderIdentity",
      readonly I: typeof IdentityProviderReq,
      readonly O: typeof ExistResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a new identity
     *
     * @generated from rpc dictybase.identity.IdentityService.CreateIdentity
     */
    readonly createIdentity: {
      readonly name: "CreateIdentity",
      readonly I: typeof CreateIdentityReq,
      readonly O: typeof Identity,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Delete an existing identity
     *
     * @generated from rpc dictybase.identity.IdentityService.DeleteIdentity
     */
    readonly deleteIdentity: {
      readonly name: "DeleteIdentity",
      readonly I: typeof IdRequest,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Basic health check that always return success
     *
     * @generated from rpc dictybase.identity.IdentityService.Healthz
     */
    readonly healthz: {
      readonly name: "Healthz",
      readonly I: typeof HealthzIdRequest,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
  }
};

