// @generated by protoc-gen-es v1.6.0
// @generated from file dictybase/identity/identity.proto (package dictybase.identity, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Links } from "../api/jsonapi/payload_pb.js";

/**
 * Definition for various fields
 *
 * @generated from message dictybase.identity.IdentityAttributes
 */
export declare class IdentityAttributes extends Message<IdentityAttributes> {
  /**
   * An unique identifier provided by the third party.
   * Generally it's an email id, however it could be something else specifically
   * provided by an provider.
   *
   * @generated from field: string identifier = 1;
   */
  identifier: string;

  /**
   * Name of the provider, for example, orcid, google, facebook etc.
   *
   * @generated from field: string provider = 2;
   */
  provider: string;

  /**
   * The id of the user to which this identity is connected.
   * This id could be used to fetch a complete user response from the user service
   *
   * @generated from field: int64 user_id = 3;
   */
  userId: bigint;

  /**
   * Timestamp for creation and update
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<IdentityAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.identity.IdentityAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentityAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentityAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentityAttributes;

  static equals(a: IdentityAttributes | PlainMessage<IdentityAttributes> | undefined, b: IdentityAttributes | PlainMessage<IdentityAttributes> | undefined): boolean;
}

/**
 * @generated from message dictybase.identity.IdentityData
 */
export declare class IdentityData extends Message<IdentityData> {
  /**
   * The resource name
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Unique id
   *
   * @generated from field: int64 id = 2;
   */
  id: bigint;

  /**
   * @generated from field: dictybase.identity.IdentityAttributes attributes = 3;
   */
  attributes?: IdentityAttributes;

  /**
   * @generated from field: dictybase.api.jsonapi.Links links = 4;
   */
  links?: Links;

  constructor(data?: PartialMessage<IdentityData>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.identity.IdentityData";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentityData;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentityData;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentityData;

  static equals(a: IdentityData | PlainMessage<IdentityData> | undefined, b: IdentityData | PlainMessage<IdentityData> | undefined): boolean;
}

/**
 * @generated from message dictybase.identity.Identity
 */
export declare class Identity extends Message<Identity> {
  /**
   * @generated from field: dictybase.identity.IdentityData data = 1;
   */
  data?: IdentityData;

  /**
   * @generated from field: dictybase.api.jsonapi.Links links = 4;
   */
  links?: Links;

  constructor(data?: PartialMessage<Identity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.identity.Identity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Identity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Identity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Identity;

  static equals(a: Identity | PlainMessage<Identity> | undefined, b: Identity | PlainMessage<Identity> | undefined): boolean;
}

/**
 * @generated from message dictybase.identity.IdentityProviderReq
 */
export declare class IdentityProviderReq extends Message<IdentityProviderReq> {
  /**
   * An unique identifier provided by the third party.
   * Generally it's an email id, however it could be something else specifically
   * provided by an provider.
   *
   * @generated from field: string identifier = 1;
   */
  identifier: string;

  /**
   * Name of the provider, for example, orcid, google, facebook etc.
   *
   * @generated from field: string provider = 2;
   */
  provider: string;

  constructor(data?: PartialMessage<IdentityProviderReq>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.identity.IdentityProviderReq";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentityProviderReq;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentityProviderReq;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentityProviderReq;

  static equals(a: IdentityProviderReq | PlainMessage<IdentityProviderReq> | undefined, b: IdentityProviderReq | PlainMessage<IdentityProviderReq> | undefined): boolean;
}

/**
 * @generated from message dictybase.identity.CreateIdentityReq
 */
export declare class CreateIdentityReq extends Message<CreateIdentityReq> {
  /**
   * @generated from field: dictybase.identity.CreateIdentityReq.Data data = 1;
   */
  data?: CreateIdentityReq_Data;

  constructor(data?: PartialMessage<CreateIdentityReq>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.identity.CreateIdentityReq";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIdentityReq;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIdentityReq;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIdentityReq;

  static equals(a: CreateIdentityReq | PlainMessage<CreateIdentityReq> | undefined, b: CreateIdentityReq | PlainMessage<CreateIdentityReq> | undefined): boolean;
}

/**
 * @generated from message dictybase.identity.CreateIdentityReq.Data
 */
export declare class CreateIdentityReq_Data extends Message<CreateIdentityReq_Data> {
  /**
   * resource name
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: dictybase.identity.NewIdentityAttributes attributes = 2;
   */
  attributes?: NewIdentityAttributes;

  constructor(data?: PartialMessage<CreateIdentityReq_Data>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.identity.CreateIdentityReq.Data";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIdentityReq_Data;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIdentityReq_Data;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIdentityReq_Data;

  static equals(a: CreateIdentityReq_Data | PlainMessage<CreateIdentityReq_Data> | undefined, b: CreateIdentityReq_Data | PlainMessage<CreateIdentityReq_Data> | undefined): boolean;
}

/**
 * @generated from message dictybase.identity.NewIdentityAttributes
 */
export declare class NewIdentityAttributes extends Message<NewIdentityAttributes> {
  /**
   * An unique identifier provided by the third party.
   * Generally it's an email id, however it could be something else specifically
   * provided by an provider.
   *
   * @generated from field: string identifier = 1;
   */
  identifier: string;

  /**
   * Name of the provider, for example, orcid, google, facebook etc.
   *
   * @generated from field: string provider = 2;
   */
  provider: string;

  /**
   * The id of the user to which this identity is connected.
   * This id could be used to fetch a complete user response from the user service
   *
   * @generated from field: int64 user_id = 3;
   */
  userId: bigint;

  constructor(data?: PartialMessage<NewIdentityAttributes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.identity.NewIdentityAttributes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewIdentityAttributes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewIdentityAttributes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewIdentityAttributes;

  static equals(a: NewIdentityAttributes | PlainMessage<NewIdentityAttributes> | undefined, b: NewIdentityAttributes | PlainMessage<NewIdentityAttributes> | undefined): boolean;
}

