// @generated by protoc-gen-connect-es v1.3.0
// @generated from file dictybase/stock/stock.proto (package dictybase.stock, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ExistingPlasmid, ExistingStrain, NewPlasmid, NewStrain, Plasmid, PlasmidCollection, PlasmidUpdate, StockId, StockIdList, StockParameters, Strain, StrainCollection, StrainList, StrainUpdate } from "./stock_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { FileUploadRequest, FileUploadResponse } from "../api/upload/file_pb.js";

/**
 * The stock service specification
 *
 * @generated from service dictybase.stock.StockService
 */
export declare const StockService: {
  readonly typeName: "dictybase.stock.StockService",
  readonly methods: {
    /**
     * Retrieves strain by ID
     *
     * @generated from rpc dictybase.stock.StockService.GetStrain
     */
    readonly getStrain: {
      readonly name: "GetStrain",
      readonly I: typeof StockId,
      readonly O: typeof Strain,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Retrieves stock by ID
     *
     * @generated from rpc dictybase.stock.StockService.GetPlasmid
     */
    readonly getPlasmid: {
      readonly name: "GetPlasmid",
      readonly I: typeof StockId,
      readonly O: typeof Plasmid,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a new strain
     *
     * @generated from rpc dictybase.stock.StockService.CreateStrain
     */
    readonly createStrain: {
      readonly name: "CreateStrain",
      readonly I: typeof NewStrain,
      readonly O: typeof Strain,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a new plasmid
     *
     * @generated from rpc dictybase.stock.StockService.CreatePlasmid
     */
    readonly createPlasmid: {
      readonly name: "CreatePlasmid",
      readonly I: typeof NewPlasmid,
      readonly O: typeof Plasmid,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update an existing strain
     *
     * @generated from rpc dictybase.stock.StockService.UpdateStrain
     */
    readonly updateStrain: {
      readonly name: "UpdateStrain",
      readonly I: typeof StrainUpdate,
      readonly O: typeof Strain,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update an existing plasmid
     *
     * @generated from rpc dictybase.stock.StockService.UpdatePlasmid
     */
    readonly updatePlasmid: {
      readonly name: "UpdatePlasmid",
      readonly I: typeof PlasmidUpdate,
      readonly O: typeof Plasmid,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove an existing stock
     *
     * @generated from rpc dictybase.stock.StockService.RemoveStock
     */
    readonly removeStock: {
      readonly name: "RemoveStock",
      readonly I: typeof StockId,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List strains using pagination, ten entries are retrieved by default
     *
     * @generated from rpc dictybase.stock.StockService.ListStrains
     */
    readonly listStrains: {
      readonly name: "ListStrains",
      readonly I: typeof StockParameters,
      readonly O: typeof StrainCollection,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List strains using strain id without any pagination
     *
     * @generated from rpc dictybase.stock.StockService.ListStrainsByIds
     */
    readonly listStrainsByIds: {
      readonly name: "ListStrainsByIds",
      readonly I: typeof StockIdList,
      readonly O: typeof StrainList,
      readonly kind: MethodKind.Unary,
    },
    /**
     * List plasmids using pagination, ten entries are retrieved by default
     *
     * @generated from rpc dictybase.stock.StockService.ListPlasmids
     */
    readonly listPlasmids: {
      readonly name: "ListPlasmids",
      readonly I: typeof StockParameters,
      readonly O: typeof PlasmidCollection,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Load existing strain
     *
     * @generated from rpc dictybase.stock.StockService.LoadStrain
     */
    readonly loadStrain: {
      readonly name: "LoadStrain",
      readonly I: typeof ExistingStrain,
      readonly O: typeof Strain,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Load existing plasmid
     *
     * @generated from rpc dictybase.stock.StockService.LoadPlasmid
     */
    readonly loadPlasmid: {
      readonly name: "LoadPlasmid",
      readonly I: typeof ExistingPlasmid,
      readonly O: typeof Plasmid,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Upload obojson formatted file through client side streaming
     *
     * @generated from rpc dictybase.stock.StockService.OboJSONFileUpload
     */
    readonly oboJSONFileUpload: {
      readonly name: "OboJSONFileUpload",
      readonly I: typeof FileUploadRequest,
      readonly O: typeof FileUploadResponse,
      readonly kind: MethodKind.ClientStreaming,
    },
  }
};

