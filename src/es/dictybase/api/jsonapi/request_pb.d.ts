// @generated by protoc-gen-es v1.6.0
// @generated from file dictybase/api/jsonapi/request.proto (package dictybase.api.jsonapi, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A `GetRequest` defines various url and query parameters that could be passed
 * in a HTTP **GET** request to a singular resource. Majority of the request
 * parameters are identical or similar to [jsonapi](http://jsonapi.org).
 *
 * @generated from message dictybase.api.jsonapi.GetRequest
 */
export declare class GetRequest extends Message<GetRequest> {
  /**
   * An unique identifier, for example:
   * "/users/34"
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * include query parameter to retrieve any particular or particular
   * combination of relationships. Multiple include values are delimited by
   * comma(,).
   *
   * For example,
   *      /{resource_name}/13?include=baz
   *      /{resource_name}/13?include=baz,bot
   *
   * @generated from field: string include = 2;
   */
  include: string;

  /**
   * fields query parameter to retrieve any particular or any particular
   * combination of attributes. Multiple fields values are delimited by comma(,).
   *
   * For example
   *      /{resource_name}/29?fields=foo
   *      /{resource_name}/?fields=foo,bar
   *
   * @generated from field: string fields = 3;
   */
  fields: string;

  constructor(data?: PartialMessage<GetRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.GetRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequest;

  static equals(a: GetRequest | PlainMessage<GetRequest> | undefined, b: GetRequest | PlainMessage<GetRequest> | undefined): boolean;
}

/**
 * A `GetEmailRequest` is identical to GetRequest except `email` id used as unique identifier.
 *
 * @generated from message dictybase.api.jsonapi.GetEmailRequest
 */
export declare class GetEmailRequest extends Message<GetEmailRequest> {
  /**
   * Email id
   * "/users/newman@seinfeld.org"
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * include query parameter to retrieve any particular or particular
   * combination of relationships. Multiple include values are delimited by
   * comma(,).
   *
   * For example,
   *          /{resource_name}/13?include=baz
   *          /{resource_name}/13?include=baz,bot
   *
   * @generated from field: string include = 2;
   */
  include: string;

  /**
   * fields query parameter to retrieve any particular or any particular
   * combination of attributes. Multiple fields values are delimited by comma(,).
   *
   * For example,
   *          /{resource_name}/29?fields=foo
   *          /{resource_name}/?fields=foo,bar
   *
   * @generated from field: string fields = 3;
   */
  fields: string;

  constructor(data?: PartialMessage<GetEmailRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.GetEmailRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEmailRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEmailRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEmailRequest;

  static equals(a: GetEmailRequest | PlainMessage<GetEmailRequest> | undefined, b: GetEmailRequest | PlainMessage<GetEmailRequest> | undefined): boolean;
}

/**
 * A `GetRequestWithFields` is a subset of GetRequest which only allow the fields parameter.
 *
 * @generated from message dictybase.api.jsonapi.GetRequestWithFields
 */
export declare class GetRequestWithFields extends Message<GetRequestWithFields> {
  /**
   * An unique identifier, for example:
   * "/users/34"
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * fields query parameter to retrieve any particular or any particular
   * combination of attributes. Multiple fields values are delimited by comma(,).
   *
   * For example
   * /{resource_name}/29?fields=foo
   * /{resource_name}/?fields=foo,bar
   *
   * @generated from field: string fields = 2;
   */
  fields: string;

  constructor(data?: PartialMessage<GetRequestWithFields>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.GetRequestWithFields";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRequestWithFields;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRequestWithFields;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRequestWithFields;

  static equals(a: GetRequestWithFields | PlainMessage<GetRequestWithFields> | undefined, b: GetRequestWithFields | PlainMessage<GetRequestWithFields> | undefined): boolean;
}

/**
 * A `RelationshipRequest` defines the url parameter for relationship resources
 * that are given in the links field of relationship object
 *
 * @generated from message dictybase.api.jsonapi.RelationshipRequest
 */
export declare class RelationshipRequest extends Message<RelationshipRequest> {
  /**
   * An unique identifier, for example:
   * "/users/45/roles" or "/users/45/relationships/roles"
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<RelationshipRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.RelationshipRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationshipRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationshipRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationshipRequest;

  static equals(a: RelationshipRequest | PlainMessage<RelationshipRequest> | undefined, b: RelationshipRequest | PlainMessage<RelationshipRequest> | undefined): boolean;
}

/**
 * A `RelationshipRequestWithPagination` is a `RelationshipRequest` with pagination
 *
 * @generated from message dictybase.api.jsonapi.RelationshipRequestWithPagination
 */
export declare class RelationshipRequestWithPagination extends Message<RelationshipRequestWithPagination> {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: int64 pagenum = 4;
   */
  pagenum: bigint;

  /**
   * @generated from field: int64 pagesize = 3;
   */
  pagesize: bigint;

  constructor(data?: PartialMessage<RelationshipRequestWithPagination>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.RelationshipRequestWithPagination";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationshipRequestWithPagination;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationshipRequestWithPagination;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationshipRequestWithPagination;

  static equals(a: RelationshipRequestWithPagination | PlainMessage<RelationshipRequestWithPagination> | undefined, b: RelationshipRequestWithPagination | PlainMessage<RelationshipRequestWithPagination> | undefined): boolean;
}

/**
 * A `ListRequest` defines various url and query parameters that could be
 * passed in a HTTP **GET** request to a collection resource. All collection
 * resources are expected to support pagination. Majority of the request
 * parameters are identical or similar to [jsonapi](http://jsonapi.org).
 *
 * @generated from message dictybase.api.jsonapi.ListRequest
 */
export declare class ListRequest extends Message<ListRequest> {
  /**
   * include query parameter to retrieve any particular or particular
   * combination of relationships. Multiple include values are delimited by
   * comma(,).
   *
   * For example,
   * /{resource_name}/13?include=baz
   * /{resource_name}/13?include=baz,bot
   *
   * @generated from field: string include = 1;
   */
  include: string;

  /**
   * fields query parameter to retrieve any particular or any particular
   * combination of attributes. Multiple fields values are delimited by comma(,).
   *
   * For example
   * /{resource_name}/29?fields=foo
   * /{resource_name}/?fields=foo,bar
   *
   * @generated from field: string fields = 3;
   */
  fields: string;

  /**
   * The page number to fetch
   *
   * @generated from field: int64 pagenum = 4;
   */
  pagenum: bigint;

  /**
   * Number of records per page
   *
   * @generated from field: int64 pagesize = 5;
   */
  pagesize: bigint;

  /**
   * The `filter` query parameter restricts the data return by the
   * collection. To use it, supply an attribute to filter, followed by a
   * filter expression. It uses the following syntax...
   *        attribute operator expression
   * attribute - Any one of the valid attribute of the resource.
   * operator - Defines the type of filter match to use. It could be any of
   * the following four and all of them should be URL-encoded.
   *
   *              ==  Equals (URL encoding is %3D%3D)
   *              !=  Not equals
   *              =@  Contains substring
   *              !@  Not contains substring
   *
   * expression - The value that will be included or excluded from the
   * result. URL-reserved characters must be URL-encoded.
   * For example, the following filter returns all users with last name `Gag`.
   *           /users?filter=last_name%3D%3Dgag
   *
   * Filter can be combined using OR or AND boolean logic.
   *   * The OR is represented using a comma(,).
   *   * The AND is represented using a semi-colon(;).
   *   * AND and OR operators can be combined and AND takes precedence over OR.
   *
   * @generated from field: string filter = 6;
   */
  filter: string;

  constructor(data?: PartialMessage<ListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.ListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest;

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean;
}

/**
 * A `SimpleListRequest` is identical to `ListRequest` except it does not support
 * pagination. The rest of the parameters are identical to `ListRequest` definition.
 *
 * @generated from message dictybase.api.jsonapi.SimpleListRequest
 */
export declare class SimpleListRequest extends Message<SimpleListRequest> {
  /**
   * include query parameter to retrieve any particular or particular
   * combination of relationships. Multiple include values are delimited by
   * comma(,).
   *
   * For example,
   * /{resource_name}/13?include=baz
   * /{resource_name}/13?include=baz,bot
   *
   * @generated from field: string include = 1;
   */
  include: string;

  /**
   * fields query parameter to retrieve any particular or any particular
   * combination of attributes. Multiple fields values are delimited by comma(,).
   *
   * For example
   * /{resource_name}/29?fields=foo
   * /{resource_name}/?fields=foo,bar
   *
   * @generated from field: string fields = 2;
   */
  fields: string;

  /**
   * The `filter` query parameter restricts the data return by the
   * collection. To use it, supply an attribute to filter, followed by a
   * filter expression. It uses the following syntax...
   *        attribute operator expression
   * attribute - Any one of the valid attribute of the resource.
   * operator - Defines the type of filter match to use. It could be any of
   * the following four and all of them should be URL-encoded.
   *
   *              ==  Equals (URL encoding is %3D%3D)
   *              !=  Not equals
   *              =@  Contains substring
   *              !@  Not contains substring
   *
   * expression - The value that will be included or excluded from the
   * result. URL-reserved characters must be URL-encoded.
   * For example, the following filter returns all users with last name `Gag`.
   *           /users?filter=last_name%3D%3Dgag
   *
   * Filter can be combined using OR or AND boolean logic.
   *   * The OR is represented using a comma(,).
   *   * The AND is represented using a semi-colon(;).
   *   * AND and OR operators can be combined and AND takes precedence over OR.
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  constructor(data?: PartialMessage<SimpleListRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.SimpleListRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleListRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleListRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleListRequest;

  static equals(a: SimpleListRequest | PlainMessage<SimpleListRequest> | undefined, b: SimpleListRequest | PlainMessage<SimpleListRequest> | undefined): boolean;
}

/**
 * A `DeleteRequest` defines the url parameter that must be passed
 * to remove a singular resource.
 *
 * @generated from message dictybase.api.jsonapi.DeleteRequest
 */
export declare class DeleteRequest extends Message<DeleteRequest> {
  /**
   * An unique identifier, for example:
   * "/users/34"
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<DeleteRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.DeleteRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest;

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean;
}

/**
 * @generated from message dictybase.api.jsonapi.IdRequest
 */
export declare class IdRequest extends Message<IdRequest> {
  /**
   * An unique identifier
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<IdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.IdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdRequest;

  static equals(a: IdRequest | PlainMessage<IdRequest> | undefined, b: IdRequest | PlainMessage<IdRequest> | undefined): boolean;
}

/**
 * @generated from message dictybase.api.jsonapi.IdResponse
 */
export declare class IdResponse extends Message<IdResponse> {
  /**
   * An unique identifier
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<IdResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.IdResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdResponse;

  static equals(a: IdResponse | PlainMessage<IdResponse> | undefined, b: IdResponse | PlainMessage<IdResponse> | undefined): boolean;
}

/**
 * @generated from message dictybase.api.jsonapi.HealthzIdRequest
 */
export declare class HealthzIdRequest extends Message<HealthzIdRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<HealthzIdRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.HealthzIdRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthzIdRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthzIdRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthzIdRequest;

  static equals(a: HealthzIdRequest | PlainMessage<HealthzIdRequest> | undefined, b: HealthzIdRequest | PlainMessage<HealthzIdRequest> | undefined): boolean;
}

/**
 * ExistResponse wraps a boolean response
 *
 * @generated from message dictybase.api.jsonapi.ExistResponse
 */
export declare class ExistResponse extends Message<ExistResponse> {
  /**
   * exist or non-existant
   *
   * @generated from field: bool exist = 1;
   */
  exist: boolean;

  constructor(data?: PartialMessage<ExistResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "dictybase.api.jsonapi.ExistResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExistResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExistResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExistResponse;

  static equals(a: ExistResponse | PlainMessage<ExistResponse> | undefined, b: ExistResponse | PlainMessage<ExistResponse> | undefined): boolean;
}

